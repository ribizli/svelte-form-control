{"version":3,"file":"index.js","sources":["../src/utils.ts","../src/control.ts","../src/validators.ts","../src/use-actions.ts"],"sourcesContent":["import { ValidatorFn } from \"./validators\";\n\nexport const chainValidators: (validators: ValidatorFn[]) => ValidatorFn = validators => {\n\tif (!Array.isArray(validators)) return (value: any) => null;\n\treturn fieldValue => {\n\t\tfor (const validator of validators) {\n\t\t\tconst result = validator(fieldValue);\n\t\t\tif (result) return result;\n    }\n    return null;\n\t}\n}\n\nexport const validateIterated = <T>(validators: ValidatorFn<T>[], fieldValue: T) => {\n\tif (!Array.isArray(validators)) return null;\n\t\tfor (const validator of validators) {\n\t\t\tif (typeof validator === 'function') {\n        try {\n\t\t\t\t\tconst result = validator(fieldValue);\n\t\t\t\t\tif (result != null) return result;\n        } catch (e) {\n          console.error(`validator error`, validator, e);\n        }\n      }\n    }\n    return null;\n}\n","import { derived, get, Readable, writable, Writable } from 'svelte/store';\nimport { validateIterated } from './utils';\nimport { ValidationError, ValidatorFn } from './validators';\n\ntype GroupValue<T> = { [K in keyof T]: T[K] };\n\ntype ControlTypes = string | number | boolean;\n\nexport interface $ControlState {\n  $error: ValidationError | null;\n\n  $valid: boolean;\n\n  $touched: boolean;\n\n  $dirty: boolean;\n}\n\ntype ControlState<T = any> = T extends (infer K)[] ? $ControlState & { list: Array<ControlState<K>> }\n  : T extends ControlTypes ? $ControlState\n  : T extends GroupValue<T> ? { [K in keyof T]: ControlState<T[K]> & $ControlState }\n  : $ControlState;\n\nexport abstract class ControlBase<T = any> {\n\n  protected validators: Writable<ValidatorFn<T>[]>;\n\n  constructor(validators: ValidatorFn<T>[]) {\n    this.validators = writable(validators);\n  }\n\n  abstract value: Writable<T>;\n\n  abstract state: Readable<ControlState<T>>;\n\n  abstract child(path: string): ControlBase;\n\n  abstract reset(value?: T): void;\n\n  abstract setTouched(touched: boolean): void;\n\n  setValidators(validators: ValidatorFn<T>[]) {\n    if (!(Array.isArray(validators) && validators.length)) return;\n    this.validators.set(validators);\n  }\n\n}\n\nexport class Control<T = ControlTypes> extends ControlBase<T> {\n\n  value = writable<T>(this.initial);\n\n  private touched = writable(false);\n\n  state = derived([this.value, this.touched, this.validators], ([value, $touched, validators]) => {\n    const $error = validateIterated(validators, value);\n    const $valid = $error == null;\n    const $dirty = this.initial !== value;\n    return { $error, $valid, $touched, $dirty } as ControlState<T>;\n  });\n\n  constructor(\n    private initial: T,\n    validators: ValidatorFn<T>[] = [],\n  ) {\n    super(validators);\n  }\n\n  setTouched(touched: boolean) {\n    this.touched.set(touched);\n  }\n\n  child() {\n    return null!;\n  }\n\n  reset(value?: T) {\n    if (value !== undefined) this.initial = value;\n    this.value.set(this.initial);\n    this.touched.set(false);\n  };\n\n}\n\ntype Controls<T> = { [K in keyof T]: ControlBase<T[K]> };\ntype ControlsState<T> = { [K in keyof T]: $ControlState };\nconst objectPath = /^([^.[]+)\\.?(.*)$/;\n\nexport class ControlGroup<T> extends ControlBase<T> {\n\n  private controlStore = writable<Controls<T>>({} as any);\n\n  controls: Readable<Controls<T>> = { subscribe: this.controlStore.subscribe };\n\n  private valueDerived = derived(this.controlStore, (controls: Controls<T>, set: (value: T) => void) => {\n    const keys = Object.keys(controls) as Array<keyof T>;\n    const controlValues = keys.map(key => controls[key].value);\n    const derivedValues = derived(controlValues as any,\n      values => (<any[]>values).reduce((acc, value, index) => (acc[keys[index]] = value, acc), {}) as T);\n    return derivedValues.subscribe(set);\n  });\n\n  private childStateDerived = derived(this.controlStore,\n    (controls: Controls<T>, set: (value: ControlsState<T>) => void) => {\n      const keys = Object.keys(controls) as Array<keyof T>;\n      const controlStates = keys.map(key => controls[key].state);\n      const derivedStates = derived(controlStates as any,\n        states => (<any[]>states).reduce((acc, state, index) => (acc[keys[index]] = state, acc), {}) as ControlsState<T>);\n      return derivedStates.subscribe(set);\n    });\n\n  value: Writable<T> = {\n    subscribe: this.valueDerived.subscribe,\n    set: value => this.setValue(value),\n    update: updater => this.setValue(updater(get(this.valueDerived))),\n  };\n\n  state = derived(\n    [this.valueDerived, this.childStateDerived, this.validators],\n    ([value, childState, validators]) => {\n      const children: Record<string, $ControlState> = {};\n      let childrenValid = true;\n      let $touched = false;\n      let $dirty = false;\n      for (const key of Object.keys(childState)) {\n        const state = children[key] = (childState as any)[key] as $ControlState;\n        childrenValid = childrenValid && state.$valid;\n        $touched = $touched || state.$touched;\n        $dirty = $dirty || state.$dirty;\n      }\n      const $error = validateIterated(validators, value);\n      const $valid = $error == null && childrenValid;\n      return { $error, $valid, $touched, $dirty, ...children } as ControlState<T>;\n    });\n\n  constructor(\n    controls: Controls<T>,\n    validators: ValidatorFn<T>[] = [],\n  ) {\n    super(validators);\n    this.controlStore.set(controls);\n  }\n\n  private iterateControls<K extends keyof T>(callback: (args: [K, ControlBase<T[K]>]) => void) {\n    const controls = get(this.controlStore);\n    (<[K, ControlBase<T[K]>][]>Object.entries(controls)).forEach(callback);\n  }\n\n  private setValue(value: T) {\n    this.iterateControls(([key, control]) => {\n      const controlValue = value?.[key] ?? null;\n      control.value.set(controlValue!);\n    });\n  }\n\n  addControl(key: string, control: ControlBase) {\n    this.controlStore.update(controls => ((<any>controls)[key] = control, controls));\n  }\n\n  removeControl(key: string) {\n    this.controlStore.update(controls => (delete (<any>controls)[key], controls));\n  }\n\n  setTouched(touched: boolean) {\n    this.iterateControls(([_, control]) => {\n      control.setTouched(touched);\n    });\n  }\n\n  child(path: string) {\n    const [_, name, rest] = path.match(objectPath) || [];\n    const controls = get(this.controlStore);\n    const control = name && (controls as any)[name] as ControlBase || null;\n    if (!control) return null!;\n    return rest ? control.child(rest) : control;\n  }\n\n  reset(value?: T) {\n    this.iterateControls(([key, control]) => {\n      const controlValue = value && value[key] || null;\n      control.reset(controlValue!);\n    });\n  };\n\n}\n\nconst arrayPath = /^\\[(\\d+)\\]\\.?(.*)$/;\n\nexport class ControlArray<T> extends ControlBase<T[]> {\n\n  private controlStore = writable(this._controls);\n\n  controls: Readable<ControlBase<T>[]> = { subscribe: this.controlStore.subscribe };\n\n  private valueDerived = derived(this.controlStore, (controls: ControlBase<T>[], set: (value: T[]) => void) => {\n    const derivedValues = derived(\n      controls.map(control => control.value) as any,\n      values => values as T[]);\n    return derivedValues.subscribe(set);\n  });\n\n  private childStateDerived = derived(this.controlStore,\n    (controls: ControlBase<T>[], set: (value: $ControlState[]) => void) => {\n      const derivedStates = derived(\n        controls.map(control => control.state) as any,\n        values => values as $ControlState[]);\n      return derivedStates.subscribe(set);\n    });\n\n  value: Writable<T[]> = {\n    subscribe: this.valueDerived.subscribe,\n    set: value => this.setValue(value),\n    update: updater => this.setValue(updater(get(this.valueDerived))),\n  };\n\n  state = derived(\n    [this.valueDerived, this.childStateDerived, this.validators],\n    ([value, childState, validators]) => {\n      const arrayState = {} as $ControlState & { list: $ControlState[] };\n      arrayState.list = [];\n      let childrenValid = true;\n      for (let i = 0, len = childState.length; i < len; i++) {\n        const state = childState[i];\n        arrayState.list[i] = state;\n        childrenValid = childrenValid && state.$valid;\n        arrayState.$touched = arrayState.$touched || state.$touched;\n        arrayState.$dirty = arrayState.$dirty || state.$dirty;\n      }\n      arrayState.$error = validateIterated(validators, value);\n      arrayState.$valid = arrayState.$error == null && childrenValid;\n\n      return arrayState as ControlState<T[]>;\n    });\n\n  constructor(\n    private readonly _controls: ControlBase<T>[],\n    validators: ValidatorFn<T[]>[] = [],\n  ) {\n    super(validators);\n  }\n\n  private iterateControls(callback: (control: ControlBase<T>, index: number) => void) {\n    const controls: ControlBase<T>[] = get(this.controlStore);\n    controls.forEach(callback);\n  }\n\n  private setValue(value: T[]) {\n    this.iterateControls((control, index) => {\n      const controlValue = value?.[index] ?? null;\n      control.value.set(controlValue!);\n    });\n  }\n\n  setTouched(touched: boolean) {\n    this.iterateControls(control => control.setTouched(touched));\n  }\n\n  pushControl(control: ControlBase<T>) {\n    this.controlStore.update(controls => (controls.push(control), controls));\n  }\n\n  addControlAt(index: number, control: ControlBase<T>) {\n    this.controlStore.update(controls => (controls.splice(index, 0, control), controls));\n  }\n\n  removeControlAt(index: number) {\n    this.controlStore.update(controls => (controls.splice(index, 1), controls));\n  }\n\n  removeControl(control: ControlBase<T>) {\n    this.controlStore.update(controls => controls.filter(c => c !== control));\n  }\n\n  slice(start?: number, end?: number) {\n    this.controlStore.update(controls => controls.slice(start, end));\n  }\n\n  child(path: string) {\n    const [_, index, rest] = path.match(arrayPath) || [];\n    const controls: ControlBase<T>[] = get(this.controlStore);\n    const control = index != null && controls[+index] || null;\n    if (!control) return null!;\n    return rest ? control.child(rest) : control;\n  }\n\n  reset(value?: T[]) {\n    this.iterateControls((control, index) => {\n      const controlValue = value && value[index] || null;\n      control.reset(controlValue!);\n    });\n  }\n\n}\n","export interface ValidationError<D = any> {\n\t[name: string]: D;\n}\n\nexport type ValidatorFn<T = any, D = any> = (fieldValue: T) => ValidationError<D> | null;\n\ntype ValidatorFactory<C = unknown, T = any, D = any> = (config: C) => ValidatorFn<T, D>;\n\nconst empty = (value: any) => value == null || `${value}` === '';\n\nexport const required: ValidatorFn<string | number | boolean, boolean> = value => {\n\tlet stringValue = value != null && value !== false ? `${value}`.trim() : '';\n\treturn stringValue !== '' ? null : { required: true };\n};\n\nconst emailFormat = /^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/;\nexport const email: ValidatorFn<string, boolean> = email => {\n\tconst valid = empty(email) || emailFormat.test(email);\n\treturn valid ? null : { email: true };\n};\n\nexport const minLength: ValidatorFactory<number, string, number> = min => value => {\n\tconst valid = empty(value) || min == null || `${value}`.trim().length >= min;\n\treturn valid ? null : { minLength: min };\n};\n\nexport const maxLength: ValidatorFactory<number, string, number> = max => value => {\n\tconst valid = empty(value) || max == null || `${value}`.trim().length <= max;\n\treturn valid ? null : { maxLength: max };\n};\n\nexport const number: ValidatorFn<string | number, boolean> = number => {\n\tconst valid = empty(number) || !isNaN(+number);\n\treturn valid ? null : { number: true };\n};\n\nconst decimalFormat = /^\\d*\\.?\\d+$/;\nexport const decimal: ValidatorFn<string | number, boolean> = number => {\n\tconst valid = empty(number) || !isNaN(+number) && decimalFormat.test(`${number}`);\n\treturn valid ? null : { decimal: true };\n};\n\nconst intFormat = /^\\d+$/;\nexport const integer: ValidatorFn<string | number, boolean> = number => {\n\tconst valid = empty(number) || !isNaN(+number) && intFormat.test(`${number}`);\n\treturn valid ? null : { integer: true };\n};\n\n\nexport const min: ValidatorFactory<number, string | number, number> = min => number => {\n\tconst valid = empty(number) || !isNaN(+number) && (min == null || number >= min);\n\treturn valid ? null : { min };\n};\n\nexport const max: ValidatorFactory<number, string | number, number> = max => number => {\n\tconst valid = empty(number) || !isNaN(+number) && (max == null || number <= max);\n\treturn valid ? null : { max };\n};\n\nexport const pattern: ValidatorFactory<RegExp, string, string> = re => text => {\n\tconst valid = empty(text) || (re == null || re.test(text));\n\treturn valid ? null : { pattern: `${re}`};\n};\n","import { get, Readable } from 'svelte/store';\nimport { $ControlState, Control, ControlBase } from \"./control\";\n\nexport const controlClasses = (el: HTMLElement, control: Control) => {\n\tif (!(control instanceof Control)) throw new Error('must be used with a Control class');\n\n\tconst classList = el.classList;\n\n\tconst stateSub = control.state.subscribe((state) => {\n\t\tif (state.$error) {\n\t\t\tclassList.add('invalid');\n\t\t\tclassList.remove('valid');\n\t\t} else {\n\t\t\tclassList.add('valid');\n\t\t\tclassList.remove('invalid');\n\t\t}\n\n\t\tif (state.$dirty) {\n\t\t\tclassList.add('dirty');\n\t\t\tclassList.remove('pristine');\n\t\t} else {\n\t\t\tclassList.add('pristine');\n\t\t\tclassList.remove('dirty');\n\t\t}\n\n\t\tif (state.$touched) {\n\t\t\tclassList.add('touched');\n\t\t} else {\n\t\t\tclassList.remove('touched');\n\t\t}\n\n\t});\n\n\tconst eventNames = ['blur', 'focusout'];\n\n\tconst unregister = () => eventNames.forEach(eventName => el.removeEventListener(eventName, touchedFn));\n\n\tconst touchedFn = () => {\n\t\tif ((<$ControlState>get(control.state)).$touched) return;\n\t\tcontrol.setTouched(true);\n\t}\n\n\teventNames.forEach(eventName => el.addEventListener(eventName, touchedFn));\n\n\treturn {\n\t\tdestroy() {\n\t\t\tunregister();\n\t\t\tstateSub();\n\t\t}\n\t}\n};\n"],"names":["validateIterated","validators","fieldValue","Array","isArray","validator","result","e","console","error","ControlBase","[object Object]","this","writable","length","set","Control","initial","super","derived","value","touched","$touched","$error","$valid","$dirty","undefined","objectPath","arrayPath","empty","emailFormat","decimalFormat","intFormat","_controls","subscribe","controlStore","controls","map","control","values","state","valueDerived","setValue","update","updater","get","childStateDerived","childState","arrayState","list","childrenValid","i","len","callback","forEach","iterateControls","index","controlValue","setTouched","push","splice","filter","c","start","end","slice","path","_","rest","match","child","reset","keys","Object","controlValues","key","reduce","acc","controlStates","states","children","entries","name","el","Error","classList","stateSub","add","remove","eventNames","touchedFn","eventName","addEventListener","removeEventListener","number","isNaN","test","decimal","email","integer","max","trim","maxLength","min","minLength","re","text","pattern","required"],"mappings":"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"}